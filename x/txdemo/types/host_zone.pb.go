// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: icademo/txdemo/host_zone.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HostZone struct {
	// Chain ID of the host zone
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Bech32 prefix of host zone's address
	Bech32Prefix string `protobuf:"bytes,17,opt,name=bech32prefix,proto3" json:"bech32prefix,omitempty"`
	// ConnectionID to the host zone
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// Transfer Channel ID to the host zone
	TransferChannelId string `protobuf:"bytes,3,opt,name=transfer_channel_id,json=transferChannelId,proto3" json:"transfer_channel_id,omitempty"`
	// ibc denom of the host zone's native token
	IbcDenom string `protobuf:"bytes,4,opt,name=ibc_denom,json=ibcDenom,proto3" json:"ibc_denom,omitempty"`
	// native denom on host zone
	HostDenom string `protobuf:"bytes,5,opt,name=host_denom,json=hostDenom,proto3" json:"host_denom,omitempty"`
	// The unbonding period in days (e.g. 21)
	UnbondingPeriod uint64 `protobuf:"varint,6,opt,name=unbonding_period,json=unbondingPeriod,proto3" json:"unbonding_period,omitempty"`
	// List of validators that are delegated to
	Validators []*Validator `protobuf:"bytes,7,rep,name=validators,proto3" json:"validators,omitempty"`
	// Address that custodies native tokens during a liquid stake
	DepositAddress string `protobuf:"bytes,8,opt,name=deposit_address,json=depositAddress,proto3" json:"deposit_address,omitempty"`
	// ICA Address on the host zone responsible for staking and unstaking
	DelegationIcaAddress string `protobuf:"bytes,9,opt,name=delegation_ica_address,json=delegationIcaAddress,proto3" json:"delegation_ica_address,omitempty"`
	// ICA Address on the host zone responsible for collecting rewards
	WithdrawalIcaAddress string `protobuf:"bytes,10,opt,name=withdrawal_ica_address,json=withdrawalIcaAddress,proto3" json:"withdrawal_ica_address,omitempty"`
	// ICA Address that receives unstaked tokens after they've finished unbonding
	RedemptionIcaAddress string `protobuf:"bytes,11,opt,name=redemption_ica_address,json=redemptionIcaAddress,proto3" json:"redemption_ica_address,omitempty"`
	Halted               bool   `protobuf:"varint,12,opt,name=halted,proto3" json:"halted,omitempty"`
	// The maximum number of messages per ICA tx
	MaxMessagesPerIcaTx uint64 `protobuf:"varint,13,opt,name=max_messages_per_ica_tx,json=maxMessagesPerIcaTx,proto3" json:"max_messages_per_ica_tx,omitempty"`
}

func (m *HostZone) Reset()         { *m = HostZone{} }
func (m *HostZone) String() string { return proto.CompactTextString(m) }
func (*HostZone) ProtoMessage()    {}
func (*HostZone) Descriptor() ([]byte, []int) {
	return fileDescriptor_86101092705de9cd, []int{0}
}
func (m *HostZone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostZone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostZone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostZone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostZone.Merge(m, src)
}
func (m *HostZone) XXX_Size() int {
	return m.Size()
}
func (m *HostZone) XXX_DiscardUnknown() {
	xxx_messageInfo_HostZone.DiscardUnknown(m)
}

var xxx_messageInfo_HostZone proto.InternalMessageInfo

func (m *HostZone) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *HostZone) GetBech32Prefix() string {
	if m != nil {
		return m.Bech32Prefix
	}
	return ""
}

func (m *HostZone) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *HostZone) GetTransferChannelId() string {
	if m != nil {
		return m.TransferChannelId
	}
	return ""
}

func (m *HostZone) GetIbcDenom() string {
	if m != nil {
		return m.IbcDenom
	}
	return ""
}

func (m *HostZone) GetHostDenom() string {
	if m != nil {
		return m.HostDenom
	}
	return ""
}

func (m *HostZone) GetUnbondingPeriod() uint64 {
	if m != nil {
		return m.UnbondingPeriod
	}
	return 0
}

func (m *HostZone) GetValidators() []*Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *HostZone) GetDepositAddress() string {
	if m != nil {
		return m.DepositAddress
	}
	return ""
}

func (m *HostZone) GetDelegationIcaAddress() string {
	if m != nil {
		return m.DelegationIcaAddress
	}
	return ""
}

func (m *HostZone) GetWithdrawalIcaAddress() string {
	if m != nil {
		return m.WithdrawalIcaAddress
	}
	return ""
}

func (m *HostZone) GetRedemptionIcaAddress() string {
	if m != nil {
		return m.RedemptionIcaAddress
	}
	return ""
}

func (m *HostZone) GetHalted() bool {
	if m != nil {
		return m.Halted
	}
	return false
}

func (m *HostZone) GetMaxMessagesPerIcaTx() uint64 {
	if m != nil {
		return m.MaxMessagesPerIcaTx
	}
	return 0
}

func init() {
	proto.RegisterType((*HostZone)(nil), "icademo.txdemo.HostZone")
}

func init() { proto.RegisterFile("icademo/txdemo/host_zone.proto", fileDescriptor_86101092705de9cd) }

var fileDescriptor_86101092705de9cd = []byte{
	// 522 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x1b, 0xb6, 0x75, 0xad, 0xf7, 0x8f, 0x65, 0xd5, 0x48, 0x87, 0x88, 0xaa, 0x71, 0x29,
	0x12, 0x24, 0xd2, 0xc6, 0x85, 0xe3, 0x06, 0x42, 0xf4, 0xc0, 0x34, 0x95, 0x89, 0xc3, 0x2e, 0x91,
	0x63, 0xbf, 0x4d, 0x2c, 0x25, 0x76, 0x64, 0xbb, 0x2c, 0xe3, 0x53, 0xf0, 0x61, 0xf8, 0x02, 0xdc,
	0x38, 0x4e, 0x9c, 0x38, 0xa2, 0xf6, 0x8b, 0xa0, 0xd8, 0xe9, 0x3f, 0x38, 0xf4, 0xd4, 0xbe, 0xcf,
	0xef, 0x79, 0x1f, 0x5b, 0x7e, 0xf3, 0x22, 0x9f, 0x11, 0x4c, 0x21, 0x17, 0xa1, 0x2e, 0xcd, 0x4f,
	0x2a, 0x94, 0x8e, 0xbe, 0x0a, 0x0e, 0x41, 0x21, 0x85, 0x16, 0xee, 0x7e, 0xcd, 0x03, 0xcb, 0x4f,
	0x3a, 0x89, 0x48, 0x84, 0x41, 0x61, 0xf5, 0xcf, 0xba, 0x4e, 0xba, 0x89, 0x10, 0x49, 0x06, 0xa1,
	0xa9, 0xe2, 0xf1, 0x28, 0xc4, 0xfc, 0x7e, 0x86, 0x88, 0x50, 0xb9, 0x50, 0x91, 0xed, 0xb1, 0x45,
	0x8d, 0xfe, 0x3d, 0xfb, 0x0b, 0xce, 0x18, 0xc5, 0x5a, 0x48, 0xcb, 0x4f, 0x7f, 0x6c, 0xa1, 0xd6,
	0x07, 0xa1, 0xf4, 0xad, 0xe0, 0xe0, 0x76, 0x51, 0x8b, 0xa4, 0x98, 0xf1, 0x88, 0x51, 0xcf, 0xe9,
	0x39, 0xfd, 0xf6, 0x70, 0xdb, 0xd4, 0x03, 0xea, 0x9e, 0xa2, 0xdd, 0x18, 0x48, 0x7a, 0x7e, 0x56,
	0x48, 0x18, 0xb1, 0xd2, 0x3b, 0x34, 0x78, 0x45, 0x73, 0x9f, 0xa3, 0x3d, 0x22, 0x38, 0x07, 0xa2,
	0x99, 0x30, 0x19, 0x8f, 0xac, 0x69, 0x21, 0x0e, 0xa8, 0x1b, 0xa0, 0x23, 0x2d, 0x31, 0x57, 0x23,
	0x90, 0x11, 0x49, 0x31, 0xe7, 0x90, 0x55, 0xd6, 0x0d, 0x63, 0x3d, 0x9c, 0xa1, 0xb7, 0x96, 0x0c,
	0xa8, 0xfb, 0x14, 0xb5, 0x59, 0x4c, 0x22, 0x0a, 0x5c, 0xe4, 0xde, 0xa6, 0x71, 0xb5, 0x58, 0x4c,
	0xde, 0x55, 0xb5, 0xfb, 0x0c, 0x21, 0xf3, 0x98, 0x96, 0x6e, 0x19, 0xda, 0xae, 0x14, 0x8b, 0x5f,
	0xa0, 0xc7, 0x63, 0x1e, 0x0b, 0x4e, 0x19, 0x4f, 0xa2, 0x02, 0x24, 0x13, 0xd4, 0x6b, 0xf6, 0x9c,
	0xfe, 0xe6, 0xf0, 0x60, 0xae, 0x5f, 0x1b, 0xd9, 0x7d, 0x83, 0xd0, 0xfc, 0x69, 0x94, 0xb7, 0xdd,
	0xdb, 0xe8, 0xef, 0x9c, 0x75, 0x83, 0xd5, 0xc1, 0x04, 0x9f, 0x67, 0x8e, 0xe1, 0x92, 0xd9, 0xbd,
	0x40, 0x07, 0x14, 0x0a, 0xa1, 0x98, 0x8e, 0x30, 0xa5, 0x12, 0x94, 0xf2, 0x5a, 0xd5, 0x4d, 0x2e,
	0xbd, 0x5f, 0xdf, 0x5f, 0x75, 0xea, 0x69, 0x5c, 0x58, 0xf2, 0x49, 0x4b, 0xc6, 0x93, 0xe1, 0x7e,
	0xdd, 0x50, 0xab, 0xee, 0x15, 0x3a, 0xa6, 0x90, 0x41, 0x82, 0xed, 0xcb, 0x11, 0x3c, 0x4f, 0x6a,
	0xaf, 0x49, 0xea, 0x2c, 0xfa, 0x06, 0x04, 0x2f, 0xe5, 0xdd, 0x31, 0x9d, 0x52, 0x89, 0xef, 0x70,
	0xb6, 0x92, 0x87, 0xd6, 0xe5, 0x2d, 0xfa, 0x56, 0xf3, 0x24, 0x50, 0xc8, 0x8b, 0xff, 0xee, 0xb7,
	0xb3, 0x2e, 0x6f, 0xd1, 0xb7, 0x94, 0x77, 0x8c, 0x9a, 0x29, 0xce, 0x34, 0x50, 0x6f, 0xb7, 0xe7,
	0xf4, 0x5b, 0xc3, 0xba, 0x72, 0x5f, 0xa3, 0x27, 0x39, 0x2e, 0xa3, 0x1c, 0x94, 0xc2, 0x09, 0xa8,
	0x6a, 0x66, 0xe6, 0x34, 0x5d, 0x7a, 0x7b, 0x66, 0x6e, 0x47, 0x39, 0x2e, 0x3f, 0xd6, 0xf4, 0x1a,
	0xe4, 0x80, 0xe0, 0x9b, 0xf2, 0xf2, 0xfd, 0xcf, 0x89, 0xef, 0x3c, 0x4c, 0x7c, 0xe7, 0xcf, 0xc4,
	0x77, 0xbe, 0x4d, 0xfd, 0xc6, 0xc3, 0xd4, 0x6f, 0xfc, 0x9e, 0xfa, 0x8d, 0xdb, 0x97, 0x09, 0xd3,
	0xe9, 0x38, 0x0e, 0x88, 0xc8, 0xc3, 0x9b, 0x14, 0xf3, 0xf4, 0xaa, 0xfa, 0xae, 0xc2, 0xd9, 0x4e,
	0x94, 0xb3, 0xad, 0xd0, 0xf7, 0x05, 0xa8, 0xb8, 0x69, 0x56, 0xe2, 0xfc, 0x6f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xae, 0xc8, 0x69, 0x17, 0xb0, 0x03, 0x00, 0x00,
}

func (m *HostZone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostZone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostZone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bech32Prefix) > 0 {
		i -= len(m.Bech32Prefix)
		copy(dAtA[i:], m.Bech32Prefix)
		i = encodeVarintHostZone(dAtA, i, uint64(len(m.Bech32Prefix)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.MaxMessagesPerIcaTx != 0 {
		i = encodeVarintHostZone(dAtA, i, uint64(m.MaxMessagesPerIcaTx))
		i--
		dAtA[i] = 0x68
	}
	if m.Halted {
		i--
		if m.Halted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.RedemptionIcaAddress) > 0 {
		i -= len(m.RedemptionIcaAddress)
		copy(dAtA[i:], m.RedemptionIcaAddress)
		i = encodeVarintHostZone(dAtA, i, uint64(len(m.RedemptionIcaAddress)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.WithdrawalIcaAddress) > 0 {
		i -= len(m.WithdrawalIcaAddress)
		copy(dAtA[i:], m.WithdrawalIcaAddress)
		i = encodeVarintHostZone(dAtA, i, uint64(len(m.WithdrawalIcaAddress)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.DelegationIcaAddress) > 0 {
		i -= len(m.DelegationIcaAddress)
		copy(dAtA[i:], m.DelegationIcaAddress)
		i = encodeVarintHostZone(dAtA, i, uint64(len(m.DelegationIcaAddress)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.DepositAddress) > 0 {
		i -= len(m.DepositAddress)
		copy(dAtA[i:], m.DepositAddress)
		i = encodeVarintHostZone(dAtA, i, uint64(len(m.DepositAddress)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHostZone(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.UnbondingPeriod != 0 {
		i = encodeVarintHostZone(dAtA, i, uint64(m.UnbondingPeriod))
		i--
		dAtA[i] = 0x30
	}
	if len(m.HostDenom) > 0 {
		i -= len(m.HostDenom)
		copy(dAtA[i:], m.HostDenom)
		i = encodeVarintHostZone(dAtA, i, uint64(len(m.HostDenom)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.IbcDenom) > 0 {
		i -= len(m.IbcDenom)
		copy(dAtA[i:], m.IbcDenom)
		i = encodeVarintHostZone(dAtA, i, uint64(len(m.IbcDenom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TransferChannelId) > 0 {
		i -= len(m.TransferChannelId)
		copy(dAtA[i:], m.TransferChannelId)
		i = encodeVarintHostZone(dAtA, i, uint64(len(m.TransferChannelId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintHostZone(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintHostZone(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintHostZone(dAtA []byte, offset int, v uint64) int {
	offset -= sovHostZone(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HostZone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovHostZone(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovHostZone(uint64(l))
	}
	l = len(m.TransferChannelId)
	if l > 0 {
		n += 1 + l + sovHostZone(uint64(l))
	}
	l = len(m.IbcDenom)
	if l > 0 {
		n += 1 + l + sovHostZone(uint64(l))
	}
	l = len(m.HostDenom)
	if l > 0 {
		n += 1 + l + sovHostZone(uint64(l))
	}
	if m.UnbondingPeriod != 0 {
		n += 1 + sovHostZone(uint64(m.UnbondingPeriod))
	}
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovHostZone(uint64(l))
		}
	}
	l = len(m.DepositAddress)
	if l > 0 {
		n += 1 + l + sovHostZone(uint64(l))
	}
	l = len(m.DelegationIcaAddress)
	if l > 0 {
		n += 1 + l + sovHostZone(uint64(l))
	}
	l = len(m.WithdrawalIcaAddress)
	if l > 0 {
		n += 1 + l + sovHostZone(uint64(l))
	}
	l = len(m.RedemptionIcaAddress)
	if l > 0 {
		n += 1 + l + sovHostZone(uint64(l))
	}
	if m.Halted {
		n += 2
	}
	if m.MaxMessagesPerIcaTx != 0 {
		n += 1 + sovHostZone(uint64(m.MaxMessagesPerIcaTx))
	}
	l = len(m.Bech32Prefix)
	if l > 0 {
		n += 2 + l + sovHostZone(uint64(l))
	}
	return n
}

func sovHostZone(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHostZone(x uint64) (n int) {
	return sovHostZone(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HostZone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHostZone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostZone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostZone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostZone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostZone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostZone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostZone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostZone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingPeriod", wireType)
			}
			m.UnbondingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHostZone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHostZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, &Validator{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostZone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationIcaAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostZone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationIcaAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalIcaAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostZone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawalIcaAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionIcaAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostZone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedemptionIcaAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Halted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Halted = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMessagesPerIcaTx", wireType)
			}
			m.MaxMessagesPerIcaTx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMessagesPerIcaTx |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bech32Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostZone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bech32Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHostZone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHostZone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHostZone(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHostZone
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHostZone
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHostZone
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHostZone
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHostZone
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHostZone
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHostZone        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHostZone          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHostZone = fmt.Errorf("proto: unexpected end of group")
)
