// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: icademo/txdemo/validator.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Validator struct {
	Address    string                                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Weight     uint64                                 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	Delegation github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=delegation,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"delegation"`
	Jailed     bool                                   `protobuf:"varint,4,opt,name=jailed,proto3" json:"jailed,omitempty"`
	Tombstoned bool                                   `protobuf:"varint,5,opt,name=tombstoned,proto3" json:"tombstoned,omitempty"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cbfef8e0a1f78f8, []int{0}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

func (m *Validator) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Validator) GetWeight() uint64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *Validator) GetJailed() bool {
	if m != nil {
		return m.Jailed
	}
	return false
}

func (m *Validator) GetTombstoned() bool {
	if m != nil {
		return m.Tombstoned
	}
	return false
}

func init() {
	proto.RegisterType((*Validator)(nil), "icademo.txdemo.Validator")
}

func init() { proto.RegisterFile("icademo/txdemo/validator.proto", fileDescriptor_2cbfef8e0a1f78f8) }

var fileDescriptor_2cbfef8e0a1f78f8 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x85, 0xe3, 0xff, 0x2f, 0x85, 0x7a, 0x60, 0x88, 0x2a, 0x64, 0x3a, 0xb8, 0x15, 0x03, 0xea,
	0x40, 0x13, 0x09, 0x9e, 0x80, 0x0e, 0x48, 0x2c, 0x1d, 0x02, 0x62, 0x60, 0x41, 0x6e, 0x6d, 0x39,
	0x86, 0xc6, 0xb7, 0x8a, 0x0d, 0x94, 0xb7, 0xe0, 0x61, 0x78, 0x88, 0x8e, 0x15, 0x13, 0x62, 0x28,
	0xa8, 0x79, 0x11, 0x54, 0xdb, 0x91, 0x32, 0x5d, 0xdf, 0xf3, 0x5d, 0x1d, 0x1f, 0x1d, 0x4c, 0xd5,
	0x8c, 0x71, 0x51, 0x40, 0x6a, 0x97, 0x6e, 0xbc, 0xb0, 0xb9, 0xe2, 0xcc, 0x42, 0x99, 0x2c, 0x4a,
	0xb0, 0x10, 0x1f, 0x06, 0x9e, 0x78, 0xde, 0x3b, 0x9e, 0x81, 0x29, 0xc0, 0x3c, 0x38, 0x9a, 0xfa,
	0xc5, 0x9f, 0xf6, 0xba, 0x12, 0x24, 0x78, 0x7d, 0xf7, 0xf2, 0xea, 0xc9, 0x0f, 0xc2, 0x9d, 0xbb,
	0xda, 0x34, 0x3e, 0xc7, 0xfb, 0x8c, 0xf3, 0x52, 0x18, 0x43, 0xd0, 0x00, 0x0d, 0x3b, 0x63, 0xf2,
	0xf9, 0x31, 0xea, 0x06, 0x9b, 0x4b, 0x4f, 0x6e, 0x6c, 0xa9, 0xb4, 0xcc, 0xea, 0xc3, 0xf8, 0x08,
	0xb7, 0x5f, 0x85, 0x92, 0xb9, 0x25, 0xff, 0x06, 0x68, 0xd8, 0xca, 0xc2, 0x16, 0x4f, 0x30, 0xe6,
	0x62, 0x2e, 0x24, 0xb3, 0x0a, 0x34, 0xf9, 0xef, 0xec, 0x92, 0xd5, 0xa6, 0x1f, 0x7d, 0x6f, 0xfa,
	0xa7, 0x52, 0xd9, 0xfc, 0x79, 0x9a, 0xcc, 0xa0, 0x08, 0x21, 0xc3, 0x18, 0x19, 0xfe, 0x94, 0xda,
	0xb7, 0x85, 0x30, 0xc9, 0xb5, 0xb6, 0x59, 0xc3, 0x61, 0xf7, 0xcf, 0x23, 0x53, 0x73, 0xc1, 0x49,
	0x6b, 0x80, 0x86, 0x07, 0x59, 0xd8, 0x62, 0x8a, 0xb1, 0x85, 0x62, 0x6a, 0x2c, 0x68, 0xc1, 0xc9,
	0x9e, 0x63, 0x0d, 0x65, 0x7c, 0xb5, 0xda, 0x52, 0xb4, 0xde, 0x52, 0xf4, 0xbb, 0xa5, 0xe8, 0xbd,
	0xa2, 0xd1, 0xba, 0xa2, 0xd1, 0x57, 0x45, 0xa3, 0xfb, 0xb3, 0x46, 0x8a, 0xdb, 0x9c, 0xe9, 0x7c,
	0x92, 0x33, 0xad, 0xd3, 0xba, 0xf2, 0x65, 0x5d, 0xba, 0xcb, 0x33, 0x6d, 0xbb, 0xc2, 0x2e, 0xfe,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x28, 0xd3, 0x45, 0x93, 0x01, 0x00, 0x00,
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tombstoned {
		i--
		if m.Tombstoned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Jailed {
		i--
		if m.Jailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.Delegation.Size()
		i -= size
		if _, err := m.Delegation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Weight != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintValidator(dAtA []byte, offset int, v uint64) int {
	offset -= sovValidator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovValidator(uint64(m.Weight))
	}
	l = m.Delegation.Size()
	n += 1 + l + sovValidator(uint64(l))
	if m.Jailed {
		n += 2
	}
	if m.Tombstoned {
		n += 2
	}
	return n
}

func sovValidator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValidator(x uint64) (n int) {
	return sovValidator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Delegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Jailed = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tombstoned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tombstoned = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValidator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValidator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValidator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValidator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValidator = fmt.Errorf("proto: unexpected end of group")
)
