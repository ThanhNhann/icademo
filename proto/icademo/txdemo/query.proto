syntax = "proto3";
package icademo.txdemo;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "icademo/txdemo/params.proto";

option go_package = "github.com/ThanhNhann/icademo/x/txdemo/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/icademo/txdemo/params";
  }
  // QueryInterchainAccount returns the interchain account for given owner address on a given connection pair
  rpc InterchainAccount(QueryInterchainAccountRequest) returns (QueryInterchainAccountResponse) {
    option (google.api.http).get = "/inter-tx/interchain_account/owner/{owner}/connection/{connection_id}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryInterchainAccountRequest is the request type for the Query/InterchainAccountAddress RPC
message QueryInterchainAccountRequest {
  string owner         = 1;
  string connection_id = 2 [(gogoproto.moretags) = "yaml:\"connection_id\""];
}

// QueryInterchainAccountResponse the response type for the Query/InterchainAccountAddress RPC
message QueryInterchainAccountResponse {
  string interchain_account_address = 1 [(gogoproto.moretags) = "yaml:\"interchain_account_address\""];
}